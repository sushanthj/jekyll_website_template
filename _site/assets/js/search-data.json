{"0": {
    "doc": "Git Concepts",
    "title": "Before you Begin",
    "content": "Reference . In the above link, follow the procedures, but instead of using username and password each time, setup the ssh keys and use them more often . ssh keys are found in ./.ssh folder (or lookup keygen to generate your keys) . ",
    "url": "http://localhost:4000/git_concepts#before-you-begin",
    "relUrl": "/git_concepts#before-you-begin"
  },"1": {
    "doc": "Git Concepts",
    "title": "Basics of generating new content in local and pushing to github",
    "content": " ",
    "url": "http://localhost:4000/git_concepts#basics-of-generating-new-content-in-local-and-pushing-to-github",
    "relUrl": "/git_concepts#basics-of-generating-new-content-in-local-and-pushing-to-github"
  },"2": {
    "doc": "Git Concepts",
    "title": "Process for adding to a github page",
    "content": "git add . git commit -m “made new code” git push or git push origin develop (if you cloned from develop branch) . ",
    "url": "http://localhost:4000/git_concepts#process-for-adding-to-a-github-page",
    "relUrl": "/git_concepts#process-for-adding-to-a-github-page"
  },"3": {
    "doc": "Git Concepts",
    "title": "If you want to track a different branch",
    "content": ". | git branch –set-upstream-to=origin/master git add . git push | . or make a new remote . | git remote add ts_origin_wiki git@github.com:sjayanth21/BR_Wiki.git git push –set-upstream ts_origin_wiki master git push ts_origin_wiki_master | . ",
    "url": "http://localhost:4000/git_concepts#if-you-want-to-track-a-different-branch",
    "relUrl": "/git_concepts#if-you-want-to-track-a-different-branch"
  },"4": {
    "doc": "Git Concepts",
    "title": "Working with remotes",
    "content": "Any folder can have a number of remotes like: origin and ts_origin_github . To make local branch master track a different remote branch (branch in your cloud github repo) do: git branch –set-upstream-to=origin/master . or git branch –set-upstream-to=origin/develop . ",
    "url": "http://localhost:4000/git_concepts#working-with-remotes",
    "relUrl": "/git_concepts#working-with-remotes"
  },"5": {
    "doc": "Git Concepts",
    "title": "Handling merge conflicts",
    "content": "If you cloned a repo or forked your own branch you may need to pull from upstream to update your codebase. However, running a simple ‘git pull’ may throw merge conflicts . Let’s begin by assuming our local branch is called ‘feature/sj’ Our remote branch is called ‘develop’ . So do the following . | Run a ‘git fetch’ to get the updates on all branches (and if any new branch has been added) | In your personal branch commit all changes by doing: git add, commit and push | sudo apt install meld | Now to get the upstream updates do ‘git checkout main’ (or whichever is the upstream branch with latest updates) | Now to put this in your personal branch run ‘git checkout feature/sj’ | Now we do the actual merging using ‘git merge develop’ (this will merge everythin in deveop into the current branch viz feature/sj) | The above step would have thrown some merge conflicts, to solve that run ‘git mergetool’ | The above step opens meld, make all necessary resolutions and save | Now our codebase would have been updated to whatever we resolved in meld | Now run ‘git commit’ without any arguments as it is a ‘merge commit’ | Now as usual do ‘git push origin feature/sj’ to push your updated personal branch to github | . Note. When you open meld, the middle window is the final merged file which you will finally get as output. Your job will be to choose which lines of code : . | from develop | from feature/sj that will be going into your final output. develop may be on the right window and feature/sj may be on the left window. You will have two options: . | Move the lines from the left into both middle and right windows (the code highlight for that line should vanish) | Move the lines from the right into both middle and left windows (the code highlight for that line should vanish) | . | . ",
    "url": "http://localhost:4000/git_concepts#handling-merge-conflicts",
    "relUrl": "/git_concepts#handling-merge-conflicts"
  },"6": {
    "doc": "Git Concepts",
    "title": "Points to Note",
    "content": ". | If you checkout a file ‘git checkout blade.py’ it resets the file to whatever is the latest from that branch in upstream . | If you want to physically add or change remotes go to the respective folder and do ‘nano .git/config’ . | the correct syntax for the merge command is: ‘git merge ts_origin/master’ What this does is that if the current branch is origin/develop it will merge the files of current branch i.e origin/develop with ts_origin/master . | Note that even if ts_origin/master is in ts_github account and origin/master is in sushanthj github account, it will still merge as long as remotes exist for both these accounts. If remotes don’t exist, you can always add as shown up above . | . Concepts for working with two repos or two repos on two different github accounts: . Basically locally you will have ‘master’ branch if you do ‘git branch’ This master can track two upstream branches using two different remotes One remote is added automatically when you clone the repo The next remote will have to be added manually to your other git account or other repo . Then to push the same commit to both branches first do ‘git push’ and see which repo it pushes to (say it pushes to origin/master Then do ‘git push –set-upstream ts_origin/develop’ to push to your second repo However, do note that your local branch always tracks to the latest branch you pushed to i.e if you do a git pull, it will pull from the latest branch to which you pushed in this case it will pull from ts_origin/develop . Saving a patch file . If you have changes made which you want to save locally and not push to remote, you can save a patch file . git diff &gt; new_changes.patch . Now to apply this patch onto any branch, do: . git apply new_changes.patch . Saving changes by stashing . Instead of saving a specific file for changes (such as a patch file), you could also stash your changes locally . git stash . The above command will stash all tracked changes. You could also stash only committed changes. Refer: stashing . To then apply the stashed changes (one time use only as pop will remove from stash) . git stash pop . To apply without popping do: . git stash apply . To remove any particular item in stash: . git stash drop . To view all entries in stash and then apply specific one do: . git stash list git stash apply n . n = stash item number . ",
    "url": "http://localhost:4000/git_concepts#points-to-note",
    "relUrl": "/git_concepts#points-to-note"
  },"7": {
    "doc": "Git Concepts",
    "title": "Nomenclature of Git Branches",
    "content": "Usually you will need to follow the branch nomenclature which your company uses. However, it’s good to know the common industry practice: . | The branch which will be running on all production would be main (or master) | The main branch in which developers will push finalized code would be develop (sometimes develop can itself be production branch) | For any new addition that an employee wants to propose to the codebase, a branch called ‘feature/sj’ will be created (sj is my initials). This feature branch will be merged with the develop branch only after some extensive code review and testing | . Maintaining better commit history . It is also common practice to tag certain commits of the develop branch. (see tagging) . This tagging allows for easy identification as to what major release correspondeds to that commit . ",
    "url": "http://localhost:4000/git_concepts#nomenclature-of-git-branches",
    "relUrl": "/git_concepts#nomenclature-of-git-branches"
  },"8": {
    "doc": "Git Concepts",
    "title": "Git Concepts",
    "content": ". | Before you Begin | Basics of generating new content in local and pushing to github . | Process for adding to a github page | If you want to track a different branch | Working with remotes | Handling merge conflicts | Points to Note . | Concepts for working with two repos or two repos on two different github accounts: | Saving a patch file | Saving changes by stashing | . | Nomenclature of Git Branches . | Maintaining better commit history | . | . | . ",
    "url": "http://localhost:4000/git_concepts",
    "relUrl": "/git_concepts"
  },"9": {
    "doc": "Intro",
    "title": "To better your experience of writing in code",
    "content": "Download the following extensions in vscode: . | Markdown All in one | code runner (see youtube video on how to setup vscode for C++) | . ",
    "url": "http://localhost:4000/intro/#to-better-your-experience-of-writing-in-code",
    "relUrl": "/intro/#to-better-your-experience-of-writing-in-code"
  },"10": {
    "doc": "Intro",
    "title": "Shortcuts in general pour toi",
    "content": ". | Once Markdown all in one is installed, you can do ctrl+shift+v to see preview of markdown immediately | To run any C++ file it’s just ctrl+shift+n | If you want to bold any specific text in markdown just select the text by holding down ctrl+shift and using arrow keys to select the required text. Then once text is selected just do ctrl+b to bolden and ctrl+i to italicize . | click on tab after using - for normal bullet pointing to get sub-points | . | To get numbered list continuously, in-between two headings 1. and 2. all content should be indented with 4 spaces in the markdown script . | To shift between windows in ubuntu, just do windows_key+shift+right/left_arrow | To minimize or unmaximize any window in hold down alt and press space, then choose to minimize | To then maximize or move window to right half/left half of screen, windows_key+shift+right/left_arrow | . ",
    "url": "http://localhost:4000/intro/#shortcuts-in-general-pour-toi",
    "relUrl": "/intro/#shortcuts-in-general-pour-toi"
  },"11": {
    "doc": "Intro",
    "title": "Intro",
    "content": "For Jekyll reference see just_the_docs . The following pages are built in order to understand Computer Vision and Machine Learning . To deploy on heroku follow the steps in the link below (and use the gem files, rake files and proc files in this repo for reference) . The following files will need to be copied from this repo: . | config.ru | Rakefile | Procfile | static.json | config.yaml (modify this file as per requirement) | Gemfile | . And only if necessary: . | Gemfile.lock | remove _sites from .gitignore | . Run bundle once to intialize Run bundle exec jekyll serve Go to the specified webpage by the above command . After copying these files (or their necessary contents), install heroku cli and do heroku login: . curl https://cli-assets.heroku.com/install.sh | sh heroku login . Then directly start with heroku create as per the below link and the other steps necessary (git push heroku master) . Deploy jekyll on heroku . Finally, go to heroku page -&gt; settings -&gt; change the name of the app and find the url . ",
    "url": "http://localhost:4000/intro/",
    "relUrl": "/intro/"
  },"12": {
    "doc": "CS229 Recap",
    "title": "ML Recap",
    "content": " ",
    "url": "http://localhost:4000/docs/ML_recap#ml-recap",
    "relUrl": "/docs/ML_recap#ml-recap"
  },"13": {
    "doc": "CS229 Recap",
    "title": "CS229 Recap",
    "content": " ",
    "url": "http://localhost:4000/docs/ML_recap",
    "relUrl": "/docs/ML_recap"
  },"14": {
    "doc": "Recap of CS229 (Intro to ML)",
    "title": "Regression",
    "content": " ",
    "url": "http://localhost:4000/docs/ML_recap/cs229.html#regression",
    "relUrl": "/docs/ML_recap/cs229.html#regression"
  },"15": {
    "doc": "Recap of CS229 (Intro to ML)",
    "title": "Linear Regression",
    "content": " ",
    "url": "http://localhost:4000/docs/ML_recap/cs229.html#linear-regression",
    "relUrl": "/docs/ML_recap/cs229.html#linear-regression"
  },"16": {
    "doc": "Recap of CS229 (Intro to ML)",
    "title": "Recap of CS229 (Intro to ML)",
    "content": ". | Regression . | Linear Regression | . | . ",
    "url": "http://localhost:4000/docs/ML_recap/cs229.html",
    "relUrl": "/docs/ML_recap/cs229.html"
  },"17": {
    "doc": "Leetcode Data Structures",
    "title": "Arrays",
    "content": " ",
    "url": "http://localhost:4000/docs/Leet_code_crash_course/data_strucutres.html#arrays",
    "relUrl": "/docs/Leet_code_crash_course/data_strucutres.html#arrays"
  },"18": {
    "doc": "Leetcode Data Structures",
    "title": "1. Maximum Subarray",
    "content": ". Scrappy Solution . The solution timed out on the submission test cases . class Solution: def __init__(self): self.max_sum = -10000 def maxSubArray(self, nums: List[int]) -&gt; int: sliding_window = [] for i in nums: if not sliding_window: sliding_window.append(i) curr_sum = self.find_sum(sliding_window) self.save_sum(curr_sum) elif self.find_sum(sliding_window) &lt; 0: sliding_window = [] sliding_window.append(i) curr_sum = self.find_sum(sliding_window) self.save_sum(curr_sum) else: sliding_window.append(i) curr_sum = self.find_sum(sliding_window) self.save_sum(curr_sum) return self.max_sum def find_sum(self, window): sum = 0 for i in window: sum += i return sum def save_sum(self, sums): if sums &gt; self.max_sum: self.max_sum = sums . Good Solution in Python . Reference . class Solution: def __init__(self): self.max_sum = None self.cur_sum = 0 def maxSubArray(self, nums: List[int]) -&gt; int: self.max_sum = nums[0] for i in nums: if self.cur_sum &lt; 0: self.cur_sum = 0 self.cur_sum += i self.max_sum = max(self.max_sum, self.cur_sum) return self.max_sum . Good Solution in C++ . ",
    "url": "http://localhost:4000/docs/Leet_code_crash_course/data_strucutres.html#1-maximum-subarray",
    "relUrl": "/docs/Leet_code_crash_course/data_strucutres.html#1-maximum-subarray"
  },"19": {
    "doc": "Leetcode Data Structures",
    "title": "2. Contains Duplicate",
    "content": ". Good Solution in Python . class Solution: def containsDuplicate(self, nums: List[int]) -&gt; bool: flag = False hashset = set() for i in nums: if i in hashset: flag = True break hashset.add(i) return flag . Good Solution in C++ . ",
    "url": "http://localhost:4000/docs/Leet_code_crash_course/data_strucutres.html#2-contains-duplicate",
    "relUrl": "/docs/Leet_code_crash_course/data_strucutres.html#2-contains-duplicate"
  },"20": {
    "doc": "Leetcode Data Structures",
    "title": "3. Two Sum",
    "content": ". Solution in Python . class Solution: def twoSum(self, nums: List[int], target: int) -&gt; List[int]: # we'll build the ref dict as we iterate over nums # after this hashmap is built, we'll then query it over time # ref_dict format is {value: index, value: index...} ref_dict = {nums[0]:0} # create a temp value which when added to another element gives target target_complement = 0 for i in range(1,len(nums)): target_complement = nums[i] if (target - target_complement) in ref_dict.keys(): return [ref_dict[(target-target_complement)], i] else: ref_dict[target_complement] = i . Solution in C++ . ",
    "url": "http://localhost:4000/docs/Leet_code_crash_course/data_strucutres.html#3-two-sum",
    "relUrl": "/docs/Leet_code_crash_course/data_strucutres.html#3-two-sum"
  },"21": {
    "doc": "Leetcode Data Structures",
    "title": "4. Merge Sorted Array",
    "content": ". Reference . Scrappy Python Solution (didn’t even work) . class Solution: def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -&gt; None: \"\"\" Do not return anything, modify nums1 in-place instead. \"\"\" # let's find the largest value in the m array and see if there's anything larger # than that in our n array. If there is something larger, then let's not consider # that for computation m = m + n # find largest in m largest = nums1[0] for i in range(m-n): if nums1[i] &gt; largest: largest = i # find all numbers in n array greater than largest for j in range(n): if nums2[j] &gt; largest: # then save this and all following elements (as they are sorted) # in the below specified position nums1[(m - n + j):] = nums2[j:] else: # now if it isn't larger than all values in nums1, we'll have # to fit it in somewhere # lets make use of the fact that it's ordered and start at the # middle of the nums1 array (essentially do binary search) target_index = None low = 0 high = m-n while low &lt;= high: mid = int((m-n)/2) if nums2[j] &gt; nums1[mid]: low = mid + 1 elif nums2[j] &lt; nums1[mid]: high = mid - 1 else: target_index = mid # if we haven't found it yet then just see check the low and high if target_index is None: if nums2[j] &gt; mid: nums1.insert(nums2[j], mid) else: nums1.insert(nums2[j], mid-1) . Good Solution in Python . ",
    "url": "http://localhost:4000/docs/Leet_code_crash_course/data_strucutres.html#4-merge-sorted-array",
    "relUrl": "/docs/Leet_code_crash_course/data_strucutres.html#4-merge-sorted-array"
  },"22": {
    "doc": "Leetcode Data Structures",
    "title": "Leetcode Data Structures",
    "content": ". | Arrays . | 1. Maximum Subarray . | Scrappy Solution | Good Solution in Python | Good Solution in C++ | . | 2. Contains Duplicate . | Good Solution in Python | Good Solution in C++ | . | 3. Two Sum . | Solution in Python | Solution in C++ | . | 4. Merge Sorted Array . | Scrappy Python Solution (didn’t even work) | Good Solution in Python | . | . | . ",
    "url": "http://localhost:4000/docs/Leet_code_crash_course/data_strucutres.html",
    "relUrl": "/docs/Leet_code_crash_course/data_strucutres.html"
  },"23": {
    "doc": "Home",
    "title": "Interview Prep including ML/DL recaps and Leetcode questions",
    "content": " ",
    "url": "http://localhost:4000/#interview-prep-including-mldl-recaps-and-leetcode-questions",
    "relUrl": "/#interview-prep-including-mldl-recaps-and-leetcode-questions"
  },"24": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  },"25": {
    "doc": "Leetcode Data Structures Crash Course",
    "title": "Leetcode Data Structures Crash Course",
    "content": " ",
    "url": "http://localhost:4000/docs/Leet_code_crash_course",
    "relUrl": "/docs/Leet_code_crash_course"
  }
}
